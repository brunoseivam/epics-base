#!/usr/bin/perl

use strict;
use warnings;

my $inpf = shift @ARGV;

open(my $INP, '<', $inpf) or die "Failed to open $inpf";

sub noident {
	my($id) = @_;
	return $id;
}

my $havesection = 0;
my $section;
my $version = "\$Id: skel2c,v 1.3 2014/04/06 19:48:04 tom Exp \$";
my $nsec = 0;
my $ifdef;
printf  "/* This file generated automatically using\n * %s\n */\n\n",
                noident($version);
my $lineno = 0;
for (<$INP>) {
    $lineno += 1;
    chomp;

    if(/^%% *insert *VERSION *here/) {
	printf "    CONCAT1(\"#define YYMAJOR \", YYMAJOR),\n";
	printf "    CONCAT1(\"#define YYMINOR \", YYMINOR),\n";
	printf "#ifdef YYPATCH\n";
	printf "    CONCAT1(\"#define YYPATCH \", YYPATCH),\n";
	printf "#endif\n";

    } elsif(/^%%ifdef\s+(\S+)/) {
	print "#if defined($1)\n    \"#if $1\",\n";
	$ifdef = $1;

    } elsif(/^%%endif/) {
	die "skel2c: unmatched %endif in skeleton file on line $lineno\n" unless defined $ifdef;
	print "    \"#endif /* $ifdef */\",\n#endif /* defined($ifdef) */\n";
	undef $ifdef;

    } elsif(/^%%endif\s+(\S+)/) {
	die "skel2c: unmatched %endif in skeleton file on line $lineno\n" unless defined $ifdef;
	print "    \"#endif $1\",#endif /* $1 */\n";
	undef $ifdef;

    } elsif(/^%%\s*$/) {
	print "    0\n};\n\n" if($havesection>0);
	$havesection = 0;

    } elsif(/^%%\s+(\S+)/) {
	print "    0\n};\n\n" if($havesection>0);
	$havesection = 1;
	$section = $1;
	print "const char *const $1\[\] =\n{\n";

    } else {
	if($havesection>0) {
		s/([\\"])/\\$1/g;
		print "    \"$_\",\n";
	} else {
		print "$_\n";
	}
    }
}

die "skel2c: unmatched %endif in skeleton file at end\n" if defined $ifdef;

print "    0\n};\n\n" if($havesection>0);

print <<'UNTIL';
void
write_section(FILE * fp, const char *const section[])
{
    int i;
    const char *s;
    for (i = 0; (s = section[i]) != 0; ++i)
    {
	if (fp == code_file)
	    ++outline;
	fprintf(fp, "%s\n", s);
    }
}
UNTIL
